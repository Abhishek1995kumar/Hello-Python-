                                  			 INNER PROJECT FOLDER 
						-------------------------------------



1) SETTINGS.py :-



"""
Django settings for extract_image project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l=1^2sfdzmt$rt^p#n*)k@4+36(2b*dycfgvmf$pjo(jo9pnk5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'extract_image.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'extract_image.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ocr_image',
        'USER': 'root',
        'PASSWORD': '9415058209',
        'HOST': 'localhost',
        'PORT': '3306',   #my port is 3306
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'























2) URLS.py :- 


"""extract_image URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]




















3) WSGI.py :- 




"""
WSGI config for extract_image project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'extract_image.settings')

application = get_wsgi_application()




















4) ASGI.py :-   



"""
ASGI config for extract_image project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'extract_image.settings')

application = get_asgi_application()









































						          CREATE MEDIA FOLDER
                                                  --------------------------------------





This folder are used for Storing Image when we upload Image on WEB PAGE







































































				 			CREATE APPLICATION PROJECT FOLDER 
					-----------------------------------------------------------------





1) Create templetes file :--  templetes


	A) create html file :- file_name like (profile.html)  
    

<html>
   <body>

      <form name = "form" enctype = "multipart/form-data" method = "POST" >{% csrf_token %}

         <div style = "max-width:470px;">
            <center>
               <input type = "text" style = "margin-left:20%;"
               placeholder = "Name" name = "name" />
            </center>
         </div>

         <br>

         <div style = "max-width:470px;">
            <center>
               <input type = "file" style = "margin-left:20%;"
                  placeholder = "Picture" name = "picture" />
            </center>
         </div>

         <br>

         <div style = "max-width:470px;">
            <center>

               <button style = "border:0px;background-color:#4285F4; margin-top:8%;
                  height:35px; width:80%; margin-left:19%;" type = "submit" value = "Login" >
                  <strong>Store</strong>
               </button>

            </center>
         </div>

      </form>

   </body>
</html>
		



















	B) create anythor html file :- file_name like (success.html)



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Bill Images</title>

      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js">
      </script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js">
      </script>
</head>
<body>

Your Account Number is:<b>{{extract_images.account_no}}</b><br>
Your Due Date is:<b>{{extract_images.due_date}}</b><br>
Your Bill Amonut is:<b>{{extract_images.bill_amount}}</b>
</body>
</html>


























2) ADMIN.py :- 




from django.contrib import admin

# Register your models here.
























3) APPS.py :- 



from django.apps import AppConfig


class MyappConfig(AppConfig):
    name = 'myapp'





















4) FORMS.py :- 



from django import forms
from .models import *
class extract_imageForm(forms.ModelForm):
   class Meta:
      model = extract_image
      fields = ['due_date', 'account_no','bill_amount']




















5) MODELS.py :- This Folder are used to Store Output in Database




from django.db import models

# Create your models here.
class extract_image(models.Model):
   due_date = models.CharField(max_length=50)
   account_no = models.CharField(max_length=50)
   bill_amount = models.CharField(max_length=50)


   def __unicode__(self):
      return self.name




















6) TESTS.py :-


from django.test import TestCase

# Create your tests here.




















7) URLS.py :- 



from django.conf.urls import url
from django.contrib import admin
from django.urls import path
from .views import *
from django.conf import settings
from django.conf.urls.static import static
urlpatterns = [
    path('', index, name = 'index'),
    path('success', success, name = 'success'),
]
if settings.DEBUG:
        urlpatterns += static(settings.MEDIA_URL,
                              document_root=settings.MEDIA_ROOT)




















8) VIEWS.py :- 



from django.shortcuts import render

# Create your views here.
from django.http import HttpResponse
from django.shortcuts import render, redirect
from .forms import *
from django.core.files.storage import FileSystemStorage
# import sqlalchemy
from sqlalchemy import create_engine
import pytesseract
import cv2
engine = create_engine("mysql+pymysql://root:9415058209@localhost/ocr_image", echo=True)
def index(request):
    if request.method == "POST":

        uploads = request.FILES['picture']
        print(uploads.name)
        print(uploads.size)
        fs = FileSystemStorage()
        fs.save(uploads.name, uploads, max_length=None)
        pytesseract.pytesseract.tesseract_cmd = "C:/Program Files/Tesseract-OCR/tesseract.exe"
        img = cv2.imread("C:/Users/annaa/OneDrive/Desktop/extract_image/media/"+str(uploads.name),0)
        Bill_Amount = img[685:705,683:790]
        Due_Date = img[83:110, 660:800]
        CA_No = img[120:135,775:900]
        # cv2.imshow("Extract Data From Image", img)
        # cv2.waitKey()
        due_date = pytesseract.image_to_string(Due_Date)
        ca_no = pytesseract.image_to_string(CA_No)
        bill_amount = pytesseract.image_to_string(Bill_Amount)
        sql_query = r"INSERT INTO myapp_extract_image(due_date,account_no,bill_amount) VALUES (%s,%s,%s)"
        data = (str(due_date).strip(),str(ca_no).strip(),str(bill_amount).strip())
        engine.execute(sql_query,data)
        return redirect('success')

    return render(request,'profile.html')

def success(request):
    if request.method == 'GET':
        # getting all the objects of hotel.
        extract_images=extract_image.objects.last()
        return render(request, 'success.html',{'extract_images':extract_images})




















9) create media folder :- It is used for Storing Image which is call Media Folder which is create on Outer Project Folder Area
                             Here not create any File..











10) create static folder :- it is use for css/bootstrap/java file but here not create any file..






























11) MIGRATIONS Folder :- 


		A) __INIT__.py :-  It does not used...







		B) create 0001_INITIALL.py :- 



# Generated by Django 3.1.2 on 2020-12-25 09:18

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='extract_image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_date', models.CharField(max_length=50)),
                ('account_no', models.CharField(max_length=50)),
                ('bill_amount', models.CharField(max_length=50)),
            ],
        ),
    ]